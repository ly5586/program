棋盘上 A 点有一个过河卒，需要走到目标 B 点。卒行走的规则：可以向下、或者向右。同时在棋盘上 C 点有一个对方的马，
该马所在的点和所有跳跃一步可达的点称为对方马的控制点。因此称之为“马拦过河卒”。

棋盘用坐标表示，A 点 (0,0)、B 点 (n,m)，同样马的位置坐标是需要给出的。

现在要求你计算出卒从 A 点能够到达 B 点的路径的条数，假设马的位置是固定不动的，并不是卒走一步马走一步。

输入格式
一行四个正整数，分别表示 B 点坐标和马的坐标。

输出格式
一个整数，表示所有的路径条数。

输入输出样例
输入 #1复制
6 6 3 3
	
输出 #1复制
6
	
说明/提示
对于 100% 的数据，1≤n,m≤20，0≤ 马的坐标 ≤20。

    
/*这是一个缺陷文件*/    
#include <iostream>
using namespace std;
int main() {
	for(;;){
	int a[30][30] = {0};//创建棋盘
	int n, m, x, y;
	cout<<"\n";//方便重复使用
	cin >> n >> m >> x >> y;
	for (int i = 0; i <= n; i++) {
		for (int j = 0; j <= m; j++) {
			a[i][j] = 1;//为所有遍历的位置赋初值
		}
	}
	a[x][y] = 0;//马的位置
	if (x + 2 <= n && y - 1 >= 0) {
		a[x + 2][y - 1] = 0;
	}
	if (x + 2 <= n && y + 1 <= m) {
		a[x + 2][y + 1] = 0;
	}
	if (x + 1 <= n && y + 2 <= m) {
		a[x + 1][y + 2] = 0;
	}
	if (x - 1 >= 0 && y + 2 <= m) {
		a[x - 1][y + 2] = 0;
	}
	if (x - 2 >= 0 && y + 1 <= m) {
		a[x - 2][y + 1] = 0;
	}
	if (x - 2 >= 0 && y - 1 >= 0) {
		a[x - 2][y - 1] = 0;
	}
	if (x - 1 >= 0 && y - 2 >= 0) {
		a[x - 1][y - 2] = 0;
	}
	if (x + 1 <= n && y - 2 >= 0) {
		a[x + 1][y - 2] = 0;
	}
	for (int i = 0; i <= n; i++) {
		for (int j = 0; j <= m; j++) {
			if (i == 0 && j == 0) {
				continue;
			} else if (a[i][j] == 0) {
				continue;
			} else if (i == 0) {
				a[i][j] = a[i][j - 1];
			} else if (j == 0) {
				a[i][j] = a[i - 1][j];
			} else {
				a[i][j] = a[i - 1][j] + a[i][j - 1];
			}
		}
	}
	cout << a[n][m];
	}
	return 0;
}


